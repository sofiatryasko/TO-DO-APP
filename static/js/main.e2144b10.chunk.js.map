{"version":3,"sources":["utils/fetchClient.ts","utils/FilterValue.tsx","api/todos.ts","components/TodoItem.tsx","components/TodoList.tsx","components/TodoFilter.tsx","utils/Error.tsx","components/Footer.tsx","components/Notification.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","FilterValue","client","deleteTodo","id","updateTodo","todo","TodoItem","handleDelete","changeStatus","changeTitle","completed","title","useState","isEditing","setIsEditing","editedTitle","setEditedTitle","editingTodo","setEditingTodo","changeTodoTitle","event","newTitle","preventDefault","className","classNames","onDoubleClick","htmlFor","type","checked","onClick","onKeyUp","key","onSubmit","name","value","onChange","target","onBlur","TodoList","todos","map","editTodo","TodoFilter","setFilterValue","filterValue","href","selected","All","Active","Completed","Footer","clearCompletedTodos","completedTodos","activeTodos","filter","length","Notification","errorMessage","showNotification","setShowNotification","useEffect","timer","clearTimeout","aria-label","USER_ID","App","setTodos","NoError","setErrorMessage","newTodoTitle","setNewTodoTitle","tempTodo","setTempTodo","isLoading","setIsLoading","loadTodos","a","todosFromServer","Loading","handleSubmit","newTodo","userId","trim","EmptyTitle","newTodoResponse","prevTodos","Adding","Deleting","active","todoItem","error","Updating","changeStatusAllTodos","placeholder","disabled","visibleTodos","getFilteringTodos","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.e2144b10.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nexport function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum FilterValue {\n  Active = 'active',\n  Completed = 'completed',\n  All = 'all',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addNewTodo = (todo: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', todo);\n};\n\nexport const deleteTodo = (id: number) => {\n  return client.delete(`/todos/${id}`);\n};\n\nexport const updateTodo = (todo: Todo) => {\n  return client.patch(`/todos/${todo.id}`, todo);\n};\n","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport '../styles/todo.scss';\nimport { updateTodo, deleteTodo } from '../api/todos';\n\ntype Props = {\n  todo: Todo;\n  handleDelete: (id : number) => void;\n  changeStatus: (todo: Todo) => void;\n  changeTitle: (todo: Todo, editedTitle: string) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo, handleDelete, changeStatus, changeTitle,\n}) => {\n  const { completed, title } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedTitle, setEditedTitle] = useState(title);\n  const [editingTodo, setEditingTodo] = useState<Todo>(todo);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setEditedTitle(event.target.value);\n  };\n\n  const onEditMode = (editTodo: Todo) => {\n    setEditingTodo(editTodo);\n    setIsEditing(true);\n  };\n\n  const changeTodoTitle = (event: React.FormEvent, newTitle: string) => {\n    event.preventDefault();\n\n    if (!isEditing) {\n      return;\n    }\n\n    if (!editedTitle || editedTitle === '') {\n      handleDelete(editingTodo.id);\n      deleteTodo(editingTodo.id);\n    }\n\n    if (editedTitle !== editingTodo.title) {\n      updateTodo({\n        ...editingTodo,\n        title: newTitle,\n      });\n    }\n\n    setIsEditing(false);\n\n    changeTitle(editingTodo, newTitle);\n  };\n\n  const handleKeyUp = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      event.preventDefault();\n      setIsEditing(false);\n    }\n  };\n\n  return (\n    <div\n      className={classNames('todo', { completed })}\n      key={todo.id}\n      onDoubleClick={() => onEditMode(todo)}\n    >\n\n      <label className=\"todo__status-label\" htmlFor=\"checkbox_status\">\n        <input\n          id=\"checkbox_status\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onClick={() => changeStatus(todo)}\n          onKeyUp={handleKeyUp}\n        />\n      </label>\n\n      {isEditing\n        ? (\n          <form onSubmit={(event) => changeTodoTitle(event, editedTitle)}>\n            <input\n              className=\"todo__title-field\"\n              type=\"text\"\n              id=\"fname\"\n              name=\"todo\"\n              value={editedTitle}\n              onChange={handleChange}\n              onBlur={(event) => changeTodoTitle(event, editedTitle)}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span className=\"todo__title\">\n              {todo.title}\n            </span>\n            <div className=\"modal overlay\">\n              <div className=\"modal-background has-background-white-ter\" />\n              <div className=\"loader\" />\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              onClick={() => handleDelete(todo.id)}\n            >\n              ×\n            </button>\n          </>\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../types/Todo';\nimport '../styles/todo.scss';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[]\n  handleDelete: (id : number) => void;\n  changeStatus: (todo: Todo) => void;\n  changeTitle: (todo: Todo, editedTitle: string) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, handleDelete, changeStatus, changeTitle,\n}) => {\n  return (\n    <>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          handleDelete={handleDelete}\n          changeStatus={() => changeStatus(todo)}\n          changeTitle={(\n            editTodo: Todo, editedTitle: string,\n          ) => changeTitle(editTodo, editedTitle)}\n        />\n      ))}\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { FilterValue } from '../utils/FilterValue';\n\ntype Props = {\n  setFilterValue: (filterValue: FilterValue) => void;\n  filterValue: FilterValue;\n};\n\nexport const TodoFilter = ({ setFilterValue, filterValue }: Props) => {\n  return (\n    <nav className=\"filter\">\n      <a\n        href=\"#/\"\n        className={classNames('filter__link', {\n          selected: filterValue === FilterValue.All,\n        })}\n        onClick={() => setFilterValue(FilterValue.All)}\n      >\n        All\n      </a>\n\n      <a\n        href=\"#/active\"\n        className={classNames('filter__link', {\n          selected: filterValue === FilterValue.Active,\n        })}\n        onClick={() => setFilterValue(FilterValue.Active)}\n      >\n        Active\n      </a>\n\n      <a\n        href=\"#/completed\"\n        className={classNames('filter__link', {\n          selected: filterValue === FilterValue.Completed,\n        })}\n        onClick={() => setFilterValue(FilterValue.Completed)}\n      >\n        Completed\n      </a>\n    </nav>\n  );\n};\n","export enum Error {\n  NoError = '',\n  Adding = 'Unable to add a todo',\n  Deleting = 'Unable to delete a todo',\n  Updating = 'Unable to update a todo',\n  Loading = 'Unable to load todos',\n  EmptyTitle = \"Title can't be empty\",\n}\n","import { TodoFilter } from './TodoFilter';\nimport { Todo } from '../types/Todo';\nimport { FilterValue } from '../utils/FilterValue';\n\ntype Props = {\n  filterValue: FilterValue;\n  setFilterValue: (filterValue: FilterValue) => void;\n  todos: Todo[];\n  clearCompletedTodos: () => void;\n  completedTodos: Todo[];\n};\n\nexport const Footer: React.FC <Props>\n= ({\n  setFilterValue, filterValue, todos, clearCompletedTodos, completedTodos,\n}) => {\n  const activeTodos = todos.filter(todo => !todo.completed);\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {activeTodos.length}\n        {' '}\n        items left\n      </span>\n\n      <TodoFilter setFilterValue={setFilterValue} filterValue={filterValue} />\n      {completedTodos.length !== 0\n        && (\n          <button\n            type=\"button\"\n            className=\"todoapp__clear-completed\"\n            onClick={clearCompletedTodos}\n          >\n            Clear completed\n          </button>\n        )}\n    </footer>\n  );\n};\n","/* eslint-disable */ \nimport { FC, useEffect } from 'react';\nimport { Error } from '../utils/Error';\n\ntype Props = {\n  errorMessage: Error ;\n  showNotification: boolean\n  setShowNotification: (showNotification: boolean)=> void;\n};\n\nexport const Notification: FC <Props> = ({\n  errorMessage, showNotification, setShowNotification,\n}) => {\n  useEffect(() => {\n    if (showNotification) {\n      const timer = setTimeout(() => {\n        setShowNotification(false);\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    } return;\n  }, [showNotification]);\n\n  return showNotification ? (\n    <div className=\"notification is-danger is-light has-text-weight-normal\">\n      <button\n        type=\"button\"\n        className=\"delete\"\n        aria-label=\"Mute volume\"\n        onClick={() => setShowNotification(false)}\n      />\n      {errorMessage}\n    </div>\n  ) : (\n    <></>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable */\nimport React, { useState, useEffect, ChangeEvent } from 'react';\nimport classNames from 'classnames';\nimport { UserWarning } from './UserWarning';\nimport {\n  getTodos, addNewTodo, deleteTodo, updateTodo,\n} from './api/todos';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\nimport { Notification } from './components/Notification';\nimport { Error } from './utils/Error';\nimport { FilterValue } from './utils/FilterValue';\n\nconst USER_ID = 6752;\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterValue, setFilterValue] = useState(FilterValue.All);\n  const [errorMessage, setErrorMessage] = useState<Error>(Error.NoError);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [showNotification, setShowNotification] = useState(false);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadTodos = async () => {\n    try {\n      setIsLoading(true);\n      const todosFromServer = await getTodos(USER_ID);\n\n      setTodos(todosFromServer);\n    } catch (error) {\n      setErrorMessage(Error.Loading);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  const getFilteringTodos = () => {\n    let visibleTodos = [...todos];\n\n    switch (filterValue) {\n      case FilterValue.Active: visibleTodos = visibleTodos.filter(\n        (todo) => !todo.completed,\n      );\n        break;\n      case FilterValue.Completed: visibleTodos = visibleTodos.filter(\n        (todo) => todo.completed,\n      );\n        break;\n      default:\n        break;\n    }\n\n    return visibleTodos;\n  };\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewTodoTitle(event.target.value);\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newTodo: Omit<Todo, 'id'> = {\n      userId: USER_ID,\n      title: newTodoTitle.trim(),\n      completed: false,\n    };\n\n    setNewTodoTitle('');\n    setTempTodo({ ...newTodo, id: 0 });\n\n    if (!newTodoTitle) {\n      setErrorMessage(Error.EmptyTitle);\n      setShowNotification(true);\n\n      return;\n    }\n\n    if (newTodoTitle.trim()) {\n      try {\n        setIsLoading(true);\n        const newTodoResponse = await addNewTodo(newTodo);\n\n        setTodos((prevTodos) => [...prevTodos, newTodoResponse]);\n        setTempTodo(null);\n      } catch (error) {\n        setErrorMessage(Error.Adding);\n        setShowNotification(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const handleDelete = async (id:number) => {\n    try {\n      setIsLoading(true);\n      await deleteTodo(id);\n      setTodos((prevTodos) => prevTodos.filter(todo => todo.id !== id));\n    } catch (error) {\n      setErrorMessage(Error.Deleting);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearCompletedTodos = () => {\n    todos.filter(todo => {\n      if (todo.completed) {\n        deleteTodo(todo.id);\n        handleDelete(todo.id);\n      }\n\n      return todo;\n    });\n    setTodos(todos);\n  };\n\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const changeStatus = (todo:Todo) => {\n    try {\n      setIsLoading(true);\n      setTodos(todos => todos.map(todoItem => (todoItem.id === todo.id ? { ...todoItem, completed: !todoItem.completed } : todoItem)));\n      updateTodo(todo);\n    } catch (error) {\n      setErrorMessage(Error.Loading);\n      setErrorMessage(Error.Updating);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const changeTitle = (todo:Todo, editedTitle: string) => {\n    try {\n      setIsLoading(true);\n      setTodos(todos => todos.map(todoItem => (todoItem.id === todo.id ? { ...todoItem, title: editedTitle } : todoItem)));\n      updateTodo(todo);\n    } catch (error) {\n      setErrorMessage(Error.Loading);\n      setErrorMessage(Error.Updating);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  function isAllTodosChecked(todos: Todo[]) {\n    for (const todo of todos) {\n      if (!todo.completed) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const changeStatusAllTodos = () => {\n    try {\n      setIsLoading(true);\n      setTodos(todos => todos.map((todoItem) => (!todoItem.completed ? { ...todoItem, completed: true } : todoItem)));\n    } catch (error) {\n      setErrorMessage(Error.Loading);\n      setErrorMessage(Error.Updating);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          {todos\n             && (\n               <button\n                 type=\"button\"\n                 className={classNames('todoapp__toggle-all', { active: !isAllTodosChecked })}\n                 onClick={() => changeStatusAllTodos()}\n               />\n             )}\n\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              className=\"todoapp__new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newTodoTitle}\n              onChange={handleInput}\n              disabled={isLoading}\n            />\n          </form>\n        </header>\n\n        <section className=\"todoapp__main\">\n          {{ tempTodo } && (\n            <TodoList\n              todos={getFilteringTodos()}\n              handleDelete={handleDelete}\n              changeStatus={changeStatus}\n              changeTitle={changeTitle}\n            />\n          )}\n        </section>\n        {todos.length !== 0 &&(\n          <Footer\n            setFilterValue={setFilterValue}\n            filterValue={filterValue}\n            todos={todos}\n            clearCompletedTodos={clearCompletedTodos}\n            completedTodos={completedTodos}\n          />\n        )}\n      </div>\n      {errorMessage\n        && (\n          <Notification\n            errorMessage={errorMessage}\n            showNotification={showNotification}\n            setShowNotification={setShowNotification}\n          />\n        )}\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<App />);\n"],"sourceRoot":""}