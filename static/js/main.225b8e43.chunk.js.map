{"version":3,"sources":["utils/fetchClient.ts","utils/FilterValue.tsx","api/todos.ts","components/TodoItem.tsx","components/TodoList.tsx","components/TodoFilter.tsx","utils/Error.tsx","components/Footer.tsx","components/Notification.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","FilterValue","client","deleteTodo","id","updateTodo","todo","TodoItem","handleDelete","changeStatus","changeTitle","isTempTodo","completed","title","useState","isEditing","setIsEditing","editedTitle","setEditedTitle","editingTodo","setEditingTodo","changeTodoTitle","event","newTitle","preventDefault","className","classNames","onDoubleClick","htmlFor","type","checked","onClick","onKeyUp","key","onSubmit","name","value","onChange","target","onBlur","TodoList","todos","map","editTodo","TodoFilter","setFilterValue","filterValue","href","selected","All","Active","Completed","Footer","clearCompletedTodos","completedTodos","activeTodos","filter","length","Notification","errorMessage","showNotification","setShowNotification","useEffect","timer","clearTimeout","aria-label","USER_ID","App","setTodos","NoError","setErrorMessage","newTodoTitle","setNewTodoTitle","tempTodo","setTempTodo","isLoading","setIsLoading","loadTodos","a","todosFromServer","Loading","handleSubmit","newTodo","userId","trim","EmptyTitle","newTodoResponse","prevTodos","Adding","Deleting","console","log","todoItem","error","Updating","active","changeStatusAllTodos","placeholder","disabled","visibleTodos","getFilteringTodos","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.225b8e43.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nexport function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum FilterValue {\n  Active = 'active',\n  Completed = 'completed',\n  All = 'all',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addNewTodo = (todo: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', todo);\n};\n\nexport const deleteTodo = (id: number) => {\n  return client.delete(`/todos/${id}`);\n};\n\nexport const updateTodo = (todo: Todo) => {\n  return client.patch(`/todos/${todo.id}`, todo);\n};\n","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport classNames from 'classnames';\r\nimport { Todo } from '../types/Todo';\r\nimport '../styles/todo.scss';\r\nimport { updateTodo, deleteTodo } from '../api/todos';\r\n\r\ntype Props = {\r\n  todo: Todo;\r\n  handleDelete: (id : number) => void;\r\n  changeStatus: (todo: Todo) => void;\r\n  changeTitle: (todo: Todo, editedTitle: string) => void;\r\n  isTempTodo: boolean;\r\n};\r\n\r\nexport const TodoItem: React.FC<Props> = ({\r\n  todo, handleDelete, changeStatus, changeTitle, isTempTodo,\r\n}) => {\r\n  const { completed, title } = todo;\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedTitle, setEditedTitle] = useState(title);\r\n  const [editingTodo, setEditingTodo] = useState<Todo>(todo);\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    event.preventDefault();\r\n    setEditedTitle(event.target.value);\r\n  };\r\n\r\n  const onEditMode = (editTodo: Todo) => {\r\n    setEditingTodo(editTodo);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const changeTodoTitle = (event: React.FormEvent, newTitle: string) => {\r\n    event.preventDefault();\r\n\r\n    if (!isEditing) {\r\n      return;\r\n    }\r\n\r\n    if (!editedTitle || editedTitle === '') {\r\n      handleDelete(editingTodo.id);\r\n      deleteTodo(editingTodo.id);\r\n    }\r\n\r\n    if (editedTitle !== editingTodo.title) {\r\n      updateTodo({\r\n        ...editingTodo,\r\n        title: newTitle,\r\n      });\r\n    }\r\n\r\n    setIsEditing(false);\r\n\r\n    changeTitle(editingTodo, newTitle);\r\n  };\r\n\r\n  const handleKeyUp = (event: KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === 'Escape') {\r\n      event.preventDefault();\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classNames('todo', { completed })}\r\n      key={todo.id}\r\n      onDoubleClick={() => onEditMode(todo)}\r\n    >\r\n\r\n      <label className=\"todo__status-label\" htmlFor=\"checkbox_status\">\r\n        <input\r\n          id=\"checkbox_status\"\r\n          type=\"checkbox\"\r\n          className=\"todo__status\"\r\n          checked={completed}\r\n          onClick={() => changeStatus(todo)}\r\n          onKeyUp={handleKeyUp}\r\n        />\r\n      </label>\r\n\r\n      {isEditing\r\n        ? (\r\n          <form onSubmit={(event) => changeTodoTitle(event, editedTitle)}>\r\n            <input\r\n              className=\"todo__title-field\"\r\n              type=\"text\"\r\n              id=\"fname\"\r\n              name=\"todo\"\r\n              value={editedTitle}\r\n              onChange={handleChange}\r\n              onBlur={(event) => changeTodoTitle(event, editedTitle)}\r\n            />\r\n          </form>\r\n        )\r\n        : (\r\n          <>\r\n            <span className=\"todo__title\">\r\n              {todo.title}\r\n            </span>\r\n            <div className={classNames('modal overlay', { 'is-active': isTempTodo })}>\r\n              <div className=\"modal-background has-background-white-ter\" />\r\n              <div className=\"loader\" />\r\n            </div>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className=\"todo__remove\"\r\n              onClick={() => handleDelete(todo.id)}\r\n            >\r\n              ×\r\n            </button>\r\n          </>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Todo } from '../types/Todo';\r\nimport '../styles/todo.scss';\r\nimport { TodoItem } from './TodoItem';\r\n\r\ntype Props = {\r\n  todos: Todo[]\r\n  handleDelete: (id : number) => void;\r\n  changeStatus: (todo: Todo) => void;\r\n  changeTitle: (todo: Todo, editedTitle: string) => void;\r\n};\r\n\r\nexport const TodoList: React.FC<Props> = ({\r\n  todos, handleDelete, changeStatus, changeTitle,\r\n}) => {\r\n  return (\r\n    <>\r\n      {todos.map(todo => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          handleDelete={handleDelete}\r\n          changeStatus={changeStatus}\r\n          changeTitle={(\r\n            editTodo: Todo, editedTitle: string,\r\n          ) => changeTitle(editTodo, editedTitle)}\r\n          isTempTodo={false}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import classNames from 'classnames';\nimport { FilterValue } from '../utils/FilterValue';\n\ntype Props = {\n  setFilterValue: (filterValue: FilterValue) => void;\n  filterValue: FilterValue;\n};\n\nexport const TodoFilter = ({ setFilterValue, filterValue }: Props) => {\n  return (\n    <nav className=\"filter\">\n      <a\n        href=\"#/\"\n        className={classNames('filter__link', {\n          selected: filterValue === FilterValue.All,\n        })}\n        onClick={() => setFilterValue(FilterValue.All)}\n      >\n        All\n      </a>\n\n      <a\n        href=\"#/active\"\n        className={classNames('filter__link', {\n          selected: filterValue === FilterValue.Active,\n        })}\n        onClick={() => setFilterValue(FilterValue.Active)}\n      >\n        Active\n      </a>\n\n      <a\n        href=\"#/completed\"\n        className={classNames('filter__link', {\n          selected: filterValue === FilterValue.Completed,\n        })}\n        onClick={() => setFilterValue(FilterValue.Completed)}\n      >\n        Completed\n      </a>\n    </nav>\n  );\n};\n","export enum Error {\n  NoError = '',\n  Adding = 'Unable to add a todo',\n  Deleting = 'Unable to delete a todo',\n  Updating = 'Unable to update a todo',\n  Loading = 'Unable to load todos',\n  EmptyTitle = \"Title can't be empty\",\n}\n","import { TodoFilter } from './TodoFilter';\nimport { Todo } from '../types/Todo';\nimport { FilterValue } from '../utils/FilterValue';\n\ntype Props = {\n  filterValue: FilterValue;\n  setFilterValue: (filterValue: FilterValue) => void;\n  todos: Todo[];\n  clearCompletedTodos: () => void;\n  completedTodos: Todo[];\n};\n\nexport const Footer: React.FC <Props>\n= ({\n  setFilterValue, filterValue, todos, clearCompletedTodos, completedTodos,\n}) => {\n  const activeTodos = todos.filter(todo => !todo.completed);\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {activeTodos.length}\n        {' '}\n        items left\n      </span>\n\n      <TodoFilter setFilterValue={setFilterValue} filterValue={filterValue} />\n      {completedTodos.length !== 0\n        && (\n          <button\n            type=\"button\"\n            className=\"todoapp__clear-completed\"\n            onClick={clearCompletedTodos}\n          >\n            Clear completed\n          </button>\n        )}\n    </footer>\n  );\n};\n","/* eslint-disable */ \nimport { FC, useEffect } from 'react';\nimport { Error } from '../utils/Error';\n\ntype Props = {\n  errorMessage: Error ;\n  showNotification: boolean\n  setShowNotification: (showNotification: boolean)=> void;\n};\n\nexport const Notification: FC <Props> = ({\n  errorMessage, showNotification, setShowNotification,\n}) => {\n  useEffect(() => {\n    if (showNotification) {\n      const timer = setTimeout(() => {\n        setShowNotification(false);\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    } return;\n  }, [showNotification]);\n\n  return showNotification ? (\n    <div className=\"notification is-danger is-light has-text-weight-normal\">\n      <button\n        type=\"button\"\n        className=\"delete\"\n        aria-label=\"Mute volume\"\n        onClick={() => setShowNotification(false)}\n      />\n      {errorMessage}\n    </div>\n  ) : (\n    <></>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\r\n/* eslint-disable */\r\nimport React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport classNames from 'classnames';\r\nimport { UserWarning } from './UserWarning';\r\nimport {\r\n  getTodos, addNewTodo, deleteTodo, updateTodo,\r\n} from './api/todos';\r\nimport { Todo } from './types/Todo';\r\nimport { TodoList } from './components/TodoList';\r\nimport { Footer } from './components/Footer';\r\nimport { Notification } from './components/Notification';\r\nimport { Error } from './utils/Error';\r\nimport { FilterValue } from './utils/FilterValue';\r\nimport { TodoItem } from './components/TodoItem'\r\n\r\nconst USER_ID = 6752;\r\n\r\nexport const App: React.FC = () => {\r\n  const [todos, setTodos] = useState<Todo[]>([]);\r\n  const [filterValue, setFilterValue] = useState(FilterValue.All);\r\n  const [errorMessage, setErrorMessage] = useState<Error>(Error.NoError);\r\n  const [newTodoTitle, setNewTodoTitle] = useState('');\r\n  const [showNotification, setShowNotification] = useState(false);\r\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const loadTodos = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const todosFromServer = await getTodos(USER_ID);\r\n\r\n      setTodos(todosFromServer);\r\n    } catch (error) {\r\n      setErrorMessage(Error.Loading);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadTodos();\r\n  }, []);\r\n\r\n  if (!USER_ID) {\r\n    return <UserWarning />;\r\n  }\r\n\r\n  const getFilteringTodos = () => {\r\n    let visibleTodos = [...todos];\r\n\r\n    switch (filterValue) {\r\n      case FilterValue.Active: visibleTodos = visibleTodos.filter(\r\n        (todo) => !todo.completed,\r\n      );\r\n        break;\r\n      case FilterValue.Completed: visibleTodos = visibleTodos.filter(\r\n        (todo) => todo.completed,\r\n      );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return visibleTodos;\r\n  };\r\n\r\n  const handleInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setNewTodoTitle(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const newTodo: Omit<Todo, 'id'> = {\r\n      userId: USER_ID,\r\n      title: newTodoTitle.trim(),\r\n      completed: false,\r\n    };\r\n\r\n    setNewTodoTitle('');\r\n    setTempTodo({ ...newTodo, id: 0 });\r\n\r\n    if (!newTodoTitle) {\r\n      setErrorMessage(Error.EmptyTitle);\r\n      setShowNotification(true);\r\n\r\n      return;\r\n    }\r\n\r\n    if (newTodoTitle.trim()) {\r\n      try {\r\n        setIsLoading(true);\r\n        const newTodoResponse = await addNewTodo(newTodo);\r\n\r\n        setTodos((prevTodos) => [...prevTodos, newTodoResponse]);\r\n        setTempTodo(null);\r\n      } catch (error) {\r\n        setErrorMessage(Error.Adding);\r\n        setShowNotification(true);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id:number) => {\r\n    try {\r\n      setIsLoading(true);\r\n      await deleteTodo(id);\r\n      setTodos((prevTodos) => prevTodos.filter(todo => todo.id !== id));\r\n    } catch (error) {\r\n      setErrorMessage(Error.Deleting);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const clearCompletedTodos = () => {\r\n    todos.filter(todo => {\r\n      if (todo.completed) {\r\n        deleteTodo(todo.id);\r\n        handleDelete(todo.id);\r\n      }\r\n\r\n      return todo;\r\n    });\r\n    setTodos(todos);\r\n  };\r\n\r\n  const completedTodos = todos.filter(todo => todo.completed);\r\n\r\n  const changeStatus = (todo:Todo) => {\r\n    try {\r\n      setIsLoading(true);\r\n      console.log(todo)\r\n      setTodos(todos => todos.map(todoItem => (todoItem.id === todo.id ? { ...todoItem, completed: !todoItem.completed } : todoItem)));\r\n      updateTodo(todo);\r\n    } catch (error) {\r\n      setErrorMessage(Error.Loading);\r\n      setErrorMessage(Error.Updating);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const changeTitle = (todo:Todo, editedTitle: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setTodos(todos => todos.map(todoItem => (todoItem.id === todo.id ? { ...todoItem, title: editedTitle } : todoItem)));\r\n      updateTodo(todo);\r\n    } catch (error) {\r\n      setErrorMessage(Error.Loading);\r\n      setErrorMessage(Error.Updating);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  function isAllTodosChecked(todos: Todo[]) {\r\n    for (const todo of todos) {\r\n      if (!todo.completed) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  const changeStatusAllTodos = () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setTodos(todos => todos.map((todoItem) => (!todoItem.completed ? { ...todoItem, completed: true } : todoItem)));\r\n    } catch (error) {\r\n      setErrorMessage(Error.Loading);\r\n      setErrorMessage(Error.Updating);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todoapp\">\r\n      <h1 className=\"todoapp__title\">todos</h1>\r\n\r\n      <div className=\"todoapp__content\">\r\n        <header className=\"todoapp__header\">\r\n          {todos\r\n             && (\r\n               <button\r\n                 type=\"button\"\r\n                 className={classNames('todoapp__toggle-all', { active: !isAllTodosChecked })}\r\n                 onClick={() => changeStatusAllTodos()}\r\n               />\r\n             )}\r\n\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              className=\"todoapp__new-todo\"\r\n              placeholder=\"What needs to be done?\"\r\n              value={newTodoTitle}\r\n              onChange={handleInput}\r\n              disabled={isLoading}\r\n            />\r\n          </form>\r\n        </header>\r\n\r\n        <section className=\"todoapp__main\">\r\n            <TodoList\r\n              todos={getFilteringTodos()}\r\n              handleDelete={handleDelete}\r\n              changeStatus={changeStatus}\r\n              changeTitle={changeTitle}\r\n            />\r\n          {tempTodo && <TodoItem\r\n                todo={tempTodo}\r\n          handleDelete={handleDelete}\r\n          changeStatus={changeStatus}\r\n          changeTitle={changeTitle}\r\n                isTempTodo={true}\r\n              />}\r\n        </section>\r\n        {todos.length !== 0 &&(\r\n          <Footer\r\n            setFilterValue={setFilterValue}\r\n            filterValue={filterValue}\r\n            todos={todos}\r\n            clearCompletedTodos={clearCompletedTodos}\r\n            completedTodos={completedTodos}\r\n          />\r\n        )}\r\n      </div>\r\n      {errorMessage\r\n        && (\r\n          <Notification\r\n            errorMessage={errorMessage}\r\n            showNotification={showNotification}\r\n            setShowNotification={setShowNotification}\r\n          />\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<App />);\n"],"sourceRoot":""}